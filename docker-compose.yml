# Archivo docker-compose que comienza con la versión.
# Utilizamos "3.9" ya que es la versión más reciente en el momento de escribir esto
version: '3.9'

# Es importante entender que docker-compose trabaja con servicios.
# 1 servicio = 1 contenedor.
# Un servicio puede ser un sistema de gestión de contenido, un servidor, un servidor de bases de datos...
# La sección donde se describirán los servicios comienza con 'services'
services:
  bills:
    # Nombre del contenedor
    container_name: bills
    # La palabra clave "build" permite especificar
    # la ruta al archivo Dockerfile que se debe utilizar para crear la imagen,
    # que permitirá ejecutar el servicio.
    # Aquí, './requirements/mariadb' se corresponde con la ruta a la carpeta mariadb,
    # que contiene el Dockerfile correspondiente
    build: ./bills
    # Este parámetro define la política de reinicio del contenedor
    restart: always
    # Este parámetro indica a Compose que deseamos agregar variables de entorno desde el archivo .env,
    # que se encuentra en el contexto de compilación.
    # En este caso, el contexto de compilación es nuestro directorio actual.
    # env_file: .env
    # Aquí montamos un volumen nombrado llamado mariadb en el directorio /var/lib/mysql dentro del contenedor.
    # Esta es la ubicación estándar de datos en la mayoría de las distribuciones.
    # volumes:
    #   - db_bills:/var/lib/mysql
    # izquierda usa el server y derecha al entrar en la máquina
    ports:
      - 3001:3001
    # Este parámetro indica que el servicio del contenedor se conectará a la red llamada project,
    # que definiremos más abajo en el archivo.
    networks:
      - project
    # esperar a la instalación del servicio para inciar la ejecución
    depends_on:
      - mariadb

  users:
    restart: always
    build: ./users
    container_name: users
    ports:
      - 3000:3000
    # volumes:
    #   - db_users:/var/lib/mysql
    networks:
      - project
    depends_on:
      - mariadb

  mariadb:
    image: mariadb
    container_name: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: facturator
      MYSQL_USER: root
      MYSQL_PASSWORD: root
    volumes:
      - mariadb:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - project
  
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    # security_opt:
    #   - no-new-privileges:true
    volumes:
      # - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker-volume/portainer-data:/data
    ports:
      - 9000:9000

volumes:
  mariadb:
# El sistema de red 'project' creado por el usuario permite la comunicación entre nuestros contenedores,
# ya que están en el mismo host del demonio de Docker.
# Esto permite organizar el tráfico y la comunicación dentro de la aplicación,
# ya que abre todos los puertos entre contenedores en una red de puente, ocultando los puertos del mundo exterior.
# De esta manera, nuestros contenedores mariadb, wordpress y nginx pueden interactuar entre sí,
# y solo necesitaremos abrir el puerto 440 para el acceso externo a la aplicación.
networks:
  project:
    driver: bridge